<?php
/**
 * Media Library Functions
 *
 * WordPress modifications specific to the Media Library and attachments.
 *
 * @package dc2dc
 * @since   1.0.0
 */

/**
 * Add MIME Types.
 *
 * Add supported file extensions to the WordPress media libary.
 *
 * Note: if you want to add or delete extensions, in your child theme set a
 * higher priority to the 'upload_mimes' filter to unset or add more MIME types
 *
 * @since  1.0.0
 *
 * @link   https://codex.wordpress.org/Plugin_API/Filter_Reference/upload_mimes
 *
 * @param  array $mimes Current array of mime types.
 * @return array $mimes Modified array of mime types.
 */
function dc2dc_add_mime_types( $mimes ) {

	$mimes['doc'] = 'application/msword';
	$mimes['svg'] = 'image/svg';

	return $mimes;

}
add_filter( 'upload_mimes', 'dc2dc_add_mime_types' );

/**
 * Allow SVG Uploads.
 *
 * @since  2.0.0
 *
 * @link   https://developer.wordpress.org/reference/functions/wp_check_filetype_and_ext/
 *
 * @param array  $types    File data array containing 'ext', 'type', and 'proper_filename' keys.
 * @param string $file     Full path to the file.
 * @param string $filename The name of the file (may differ from $file due to $file being in a tmp directory).
 * @param array  $mimes    Key is the file extension with value as the mime type.
 *
 * @return array $types Modified array of uploaded file t.
 */
function dc2dc_svg_file_and_ext( $types, $file, $filename, $mimes ) {
	if ( false !== strpos( $filename, '.svg' ) ) {
		$types['ext']  = 'svg';
		$types['type'] = 'image/svg';
	}

	return $types;
}
add_filter( 'wp_check_filetype_and_ext', 'dc2dc_svg_file_and_ext', 10, 4 );

/**
 * Fixes the admin preview by adding the missing sizes.
 *
 * @since 2.0.0
 *
 * @param int|WP_Post $attachment Attachment ID or object.
 * @return array|void Array of attachment details.
 */
function dc2dc_fix_svg_admin_preview( $attachment ) {

	if ( 'image/svg' === $attachment['mime'] ) {
		$dimensions = array(
			'width'       => 300,
			'height'      => 300,
			'orientation' => 'portrait',
		);

		if ( $dimensions ) {
			$attachment = array_merge( $attachment, $dimensions );
		}

		$possible_sizes = apply_filters(
			'image_size_names_choose',
			array(
				'full'      => __( 'Full Size' ),
				'thumbnail' => __( 'Thumbnail' ),
				'medium'    => __( 'Medium' ),
				'large'     => __( 'Large' ),
			)
		);

		$sizes = array();

		foreach ( $possible_sizes as $size => $label ) {
			$default_height = 2000;
			$default_width  = 2000;

			if ( 'full' === $size && $dimensions ) {
				$default_height = $dimensions['height'];
				$default_width  = $dimensions['width'];
			}

			$sizes[ $size ] = array(
				'height'      => get_option( "{$size}_size_w", $default_height ),
				'width'       => get_option( "{$size}_size_h", $default_width ),
				'url'         => $attachment['url'],
				'orientation' => 'portrait',
			);
		}

		$attachment['sizes'] = $sizes;
		$attachment['icon']  = $attachment['url'];
	}

	return $attachment;
}
add_filter( 'wp_prepare_attachment_for_js', 'dc2dc_fix_svg_admin_preview', 10, 3 );


/**
 * Cleans up SVG code.
 *
 * Intended to removes XML doc type from SVG uploads in order to
 * prevent fatal errors from occurring in situations such as
 * `dc2dc_custom_logo`, where an SVG file is being included.
 * If the <?xml doctype existed, a fatal error would be triggered.
 *
 * @since  1.0.0
 *
 * @param  int $attachment_id The ID of the uploaded attachment.
 */
function dc2dc_clean_svg_attachment( $attachment_id ) {

	// Stores the entire server path to the uploaded file.
	$attached_filepath = get_attached_file( $attachment_id );

	// Only continues for filepaths ending in '.svg'.
	if ( '.svg' === substr( $attached_filepath, -4 ) ) {

		// Stores string of SVG content.
		$svg = dc2dc_file_get_contents( $attached_filepath );
		$svg = str_replace( 'xlink:href', 'href', $svg );

		// Stores instance of SimpleXMLElement, generated by passing the string of SVG content.
		$xml = new SimpleXMLElement( $svg );
		// Stores the DOM structure of the class instance.
		$domxml = dom_import_simplexml( $xml );
		// Sorts the newly formatted string, starting from root element (excludes the <?xml /> tag).
		// @codingStandardsIgnoreStart
		$new_svg = $domxml->ownerDocument->saveXML( $domxml->ownerDocument->documentElement );
		// @codingStandardsIgnoreEnd

		/**
		 * Initialize the WP filesystem.
		 */
		global $wp_filesystem;
		// If empty, make sure to include it.
		if ( empty( $wp_filesystem ) ) {
			require_once ABSPATH . '/wp-admin/includes/file.php';
			WP_Filesystem();
		}

		// Replace contents of this SVG with the newly formatted contents.
		$wp_filesystem->put_contents(
			$attached_filepath,
			$new_svg,
			FS_CHMOD_FILE // Predefined mode settings for WP files.
		);

	}

}
add_action( 'add_attachment', 'dc2dc_clean_svg_attachment', 1 );
